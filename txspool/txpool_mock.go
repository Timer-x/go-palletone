// Code generated by MockGen. DO NOT EDIT.
// Source: ./txspool/interface.go

// Package txspool is a generated GoMock package.
package txspool

import (
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
	common "github.com/palletone/go-palletone/common"
	modules "github.com/palletone/go-palletone/dag/modules"
	reflect "reflect"
)

// MockITxPool is a mock of ITxPool interface
type MockITxPool struct {
	ctrl     *gomock.Controller
	recorder *MockITxPoolMockRecorder
}

// MockITxPoolMockRecorder is the mock recorder for MockITxPool
type MockITxPoolMockRecorder struct {
	mock *MockITxPool
}

// NewMockITxPool creates a new mock instance
func NewMockITxPool(ctrl *gomock.Controller) *MockITxPool {
	mock := &MockITxPool{ctrl: ctrl}
	mock.recorder = &MockITxPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITxPool) EXPECT() *MockITxPoolMockRecorder {
	return m.recorder
}

// Stop mocks base method
func (m *MockITxPool) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockITxPoolMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockITxPool)(nil).Stop))
}

// AddLocal mocks base method
func (m *MockITxPool) AddLocal(tx *modules.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocal", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLocal indicates an expected call of AddLocal
func (mr *MockITxPoolMockRecorder) AddLocal(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocal", reflect.TypeOf((*MockITxPool)(nil).AddLocal), tx)
}

// AddLocals mocks base method
func (m *MockITxPool) AddLocals(txs []*modules.Transaction) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocals", txs)
	ret0, _ := ret[0].([]error)
	return ret0
}

// AddLocals indicates an expected call of AddLocals
func (mr *MockITxPoolMockRecorder) AddLocals(txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocals", reflect.TypeOf((*MockITxPool)(nil).AddLocals), txs)
}

// AddSequenTx mocks base method
func (m *MockITxPool) AddSequenTx(tx *modules.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSequenTx", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSequenTx indicates an expected call of AddSequenTx
func (mr *MockITxPoolMockRecorder) AddSequenTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSequenTx", reflect.TypeOf((*MockITxPool)(nil).AddSequenTx), tx)
}

// AddSequenTxs mocks base method
func (m *MockITxPool) AddSequenTxs(txs []*modules.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSequenTxs", txs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSequenTxs indicates an expected call of AddSequenTxs
func (mr *MockITxPoolMockRecorder) AddSequenTxs(txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSequenTxs", reflect.TypeOf((*MockITxPool)(nil).AddSequenTxs), txs)
}

// AddRemote mocks base method
func (m *MockITxPool) AddRemote(tx *modules.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemote", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemote indicates an expected call of AddRemote
func (mr *MockITxPoolMockRecorder) AddRemote(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemote", reflect.TypeOf((*MockITxPool)(nil).AddRemote), tx)
}

// AddRemotes mocks base method
func (m *MockITxPool) AddRemotes(arg0 []*modules.Transaction) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemotes", arg0)
	ret0, _ := ret[0].([]error)
	return ret0
}

// AddRemotes indicates an expected call of AddRemotes
func (mr *MockITxPoolMockRecorder) AddRemotes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemotes", reflect.TypeOf((*MockITxPool)(nil).AddRemotes), arg0)
}

// Pending mocks base method
func (m *MockITxPool) Pending() (map[common.Hash][]*TxPoolTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pending")
	ret0, _ := ret[0].(map[common.Hash][]*TxPoolTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pending indicates an expected call of Pending
func (mr *MockITxPoolMockRecorder) Pending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pending", reflect.TypeOf((*MockITxPool)(nil).Pending))
}

// Queued mocks base method
func (m *MockITxPool) Queued() ([]*TxPoolTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queued")
	ret0, _ := ret[0].([]*TxPoolTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queued indicates an expected call of Queued
func (mr *MockITxPoolMockRecorder) Queued() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queued", reflect.TypeOf((*MockITxPool)(nil).Queued))
}

// SetPendingTxs mocks base method
func (m *MockITxPool) SetPendingTxs(unit_hash common.Hash, num uint64, txs []*modules.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingTxs", unit_hash, num, txs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingTxs indicates an expected call of SetPendingTxs
func (mr *MockITxPoolMockRecorder) SetPendingTxs(unit_hash, num, txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingTxs", reflect.TypeOf((*MockITxPool)(nil).SetPendingTxs), unit_hash, num, txs)
}

// ResetPendingTxs mocks base method
func (m *MockITxPool) ResetPendingTxs(txs []*modules.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPendingTxs", txs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPendingTxs indicates an expected call of ResetPendingTxs
func (mr *MockITxPoolMockRecorder) ResetPendingTxs(txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPendingTxs", reflect.TypeOf((*MockITxPool)(nil).ResetPendingTxs), txs)
}

// DiscardTxs mocks base method
func (m *MockITxPool) DiscardTxs(hashs []common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardTxs", hashs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscardTxs indicates an expected call of DiscardTxs
func (mr *MockITxPoolMockRecorder) DiscardTxs(hashs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardTxs", reflect.TypeOf((*MockITxPool)(nil).DiscardTxs), hashs)
}

// GetUtxoEntry mocks base method
func (m *MockITxPool) GetUtxoEntry(outpoint *modules.OutPoint) (*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUtxoEntry", outpoint)
	ret0, _ := ret[0].(*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUtxoEntry indicates an expected call of GetUtxoEntry
func (mr *MockITxPoolMockRecorder) GetUtxoEntry(outpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUtxoEntry", reflect.TypeOf((*MockITxPool)(nil).GetUtxoEntry), outpoint)
}

// SubscribeTxPreEvent mocks base method
func (m *MockITxPool) SubscribeTxPreEvent(arg0 chan<- modules.TxPreEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTxPreEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeTxPreEvent indicates an expected call of SubscribeTxPreEvent
func (mr *MockITxPoolMockRecorder) SubscribeTxPreEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTxPreEvent", reflect.TypeOf((*MockITxPool)(nil).SubscribeTxPreEvent), arg0)
}

// GetSortedTxs mocks base method
func (m *MockITxPool) GetSortedTxs(processor func(*TxPoolTransaction) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSortedTxs", processor)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSortedTxs indicates an expected call of GetSortedTxs
func (mr *MockITxPoolMockRecorder) GetSortedTxs(processor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSortedTxs", reflect.TypeOf((*MockITxPool)(nil).GetSortedTxs), processor)
}

// Get mocks base method
func (m *MockITxPool) Get(hash common.Hash) (*TxPoolTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", hash)
	ret0, _ := ret[0].(*TxPoolTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockITxPoolMockRecorder) Get(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockITxPool)(nil).Get), hash)
}

// GetPoolTxsByAddr mocks base method
func (m *MockITxPool) GetPoolTxsByAddr(addr string) ([]*TxPoolTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolTxsByAddr", addr)
	ret0, _ := ret[0].([]*TxPoolTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolTxsByAddr indicates an expected call of GetPoolTxsByAddr
func (mr *MockITxPoolMockRecorder) GetPoolTxsByAddr(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolTxsByAddr", reflect.TypeOf((*MockITxPool)(nil).GetPoolTxsByAddr), addr)
}

// GetUnpackedTxsByAddr mocks base method
func (m *MockITxPool) GetUnpackedTxsByAddr(addr string) ([]*TxPoolTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnpackedTxsByAddr", addr)
	ret0, _ := ret[0].([]*TxPoolTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpackedTxsByAddr indicates an expected call of GetUnpackedTxsByAddr
func (mr *MockITxPoolMockRecorder) GetUnpackedTxsByAddr(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpackedTxsByAddr", reflect.TypeOf((*MockITxPool)(nil).GetUnpackedTxsByAddr), addr)
}

// Stats mocks base method
func (m *MockITxPool) Stats() (int, int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Stats indicates an expected call of Stats
func (mr *MockITxPoolMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockITxPool)(nil).Stats))
}

// Content mocks base method
func (m *MockITxPool) Content() (map[common.Hash]*TxPoolTransaction, map[common.Hash]*TxPoolTransaction) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content")
	ret0, _ := ret[0].(map[common.Hash]*TxPoolTransaction)
	ret1, _ := ret[1].(map[common.Hash]*TxPoolTransaction)
	return ret0, ret1
}

// Content indicates an expected call of Content
func (mr *MockITxPoolMockRecorder) Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockITxPool)(nil).Content))
}
